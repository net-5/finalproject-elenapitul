@model IEnumerable<Conference.Domain.Entities.Talks>


@{
    ViewData["Title"] = "Talks";
    Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="">

    <div class="container-fluid bg-mv" id="agenda">
        <ul class="nav nav-tabs container" id="day-schedule" role="tablist">
            <li class="nav-item">
                <a class="nav-link" id="Rossini" data-toggle="tab" href="#Rossini" role="tab" aria-controls="Rossini" aria-selected="true">Day 1</a>
            </li>
        </ul>

        <div class="tab-content">

            <div class="tab-pane active" id="Rossini" role="tabpanel" aria-labelledby="Rossini">
                <div class="container">
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            10 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id6" role="button" aria-expanded="false" aria-controls="id6">
                                    Software architecture - a pragmatic thinking
                                </a>
                            </div>
                            <div class="collapse" id="id6">
                                <div class="card card-body white bg-mv">
                                    tbd
                                </div>
                            </div>

                            <div class="sub-title">
                                Florin Olariu
                            </div>

                        </div>
                    </div>
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            11 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id1" role="button" aria-expanded="false" aria-controls="id1">
                                    Design Patterns in Functional Programming with F#
                                </a>
                            </div>
                            <div class="collapse" id="id1">
                                <div class="card card-body white bg-mv">
                                    A glance into functional programming from the point of view of the OOP developer.&#xD;&#xA;The presentation is a surface analysis of some of the Gang Of Four design patterns&#xD;&#xA;along with a comparison of the same problems in FP.&#xD;&#xA;The demos and examples are powered by F# and C#.
                                </div>
                            </div>

                            <div class="sub-title">
                                Octav Zaharia
                            </div>

                        </div>
                    </div>
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            12 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id2" role="button" aria-expanded="false" aria-controls="id2">
                                    Protecting the Design and Architecture of your App
                                </a>
                            </div>
                            <div class="collapse" id="id2">
                                <div class="card card-body white bg-mv">
                                    We have all used code analysis tools on our projects and these are useful for identifying code smells. The issue is that most of them treat metrics in isolation and isolated metrics can&#x2019;t tell you if the design is good or bad. You need more context.&#xD;&#xA;In this session we&#x2019;ll see how to go beyond code smells and identify design smells and inappropriate coupling in the technical architecture. We&#x2019;ll define detection strategies for common design smells (like God Class and Feature Envy) and implement them using NDepend. We&#x2019;ll also see how we can define fitness functions to detect dependency violations in your application&#x2019;s architecture
                                </div>
                            </div>

                            <div class="sub-title">
                                Victor Chircu
                            </div>

                        </div>
                    </div>
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            14 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id3" role="button" aria-expanded="false" aria-controls="id3">
                                    Understanding async/await in C# using JavaScript
                                </a>
                            </div>
                            <div class="collapse" id="id3">
                                <div class="card card-body white bg-mv">
                                    The async and await keywords introduced in C# 5.0 (7&#x2B; years ago) are probably the most powerful feature of the language when it comes to writing scalable applications. Yet in spite of the fact that async has now trickled down in many other languages (like ES6), it&#x2019;s still not obvious to the untrained eye what its purpose is in C# and what benefits it brings. &#xD;&#xA;If you know someone that is still &#x201C;creating new threads with await&#x201D; then this talk is for you.&#xD;&#xA;We&#x2019;re going to go chronologically backwards from ES6 to C# to see if async and await make more sense this way.
                                </div>
                            </div>

                            <div class="sub-title">
                                Sorin Damian
                            </div>

                        </div>
                    </div>
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            15 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id4" role="button" aria-expanded="false" aria-controls="id4">
                                    Blazor - .Net compiled to webassembly in the browser
                                </a>
                            </div>
                            <div class="collapse" id="id4">
                                <div class="card card-body white bg-mv">
                                    From the early days of ASP and WebForms through MVC and Razor, web development ultimately meant also writing Javascript.&#xD;&#xA;&#xD;&#xA;Still in preview, Blazor uses the Mono library compiled to webassembly which can be run in the browser, allowing you to write .net code that is then executed by the browser, giving us access to the DOM and all browser APIs.&#xD;&#xA;&#xD;&#xA;While I would still use react or Angular for my web needs, let&#x2019;s discover what Blazor brings to the table, why is it cool, how it can be used and what alternatives exist.
                                </div>
                            </div>

                            <div class="sub-title">
                                Codrin Baleanu
                            </div>

                        </div>
                    </div>
                    <div class="schedule-item row">
                        <div class="col-sm-2 time">
                            16 : 45
                        </div>
                        <div class="col-sm-10 ">
                            <div class="">
                                <a class="title" data-toggle="collapse" href="#id5" role="button" aria-expanded="false" aria-controls="id5">
                                    RTFM: why reading the documentation matters
                                </a>
                            </div>
                            <div class="collapse" id="id5">
                                <div class="card card-body white bg-mv">
                                    Description
                                </div>
                            </div>

                            <div class="sub-title">
                                Radu Iscu
                            </div>

                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

</div>

<div class="row border-top border-dark" style=background-color:#442359;>

    <div class="container">
        @foreach (var item in Model)
        {

            <div class="col-md-12" style="margin-bottom:4em; margin-top:2em">
                <div style="min-height:50px; color:#77C3E9">

                    <a class="title collapsed white" data-toggle="collapse" href='@string.Format("#id" + item.Id)' role="button" aria-expanded="false" aria-controls='@string.Format("id" + item.Id)' display="block">

                        @Html.DisplayFor(modelItem => item.Name)
                    </a>
                </div>

                <div class="collapse" id='@string.Format("id" + item.Id)' style="">
                    <div class="card card-body white bg-mv">
                        @Html.DisplayFor(modelItem => item.Description)
                    </div>
                </div>

                <div class="sub-title white bg-mv">

                    @Html.DisplayFor(modelItem => item.Speaker.FullName)


                </div>

            </div>

        }

    </div>

</div>